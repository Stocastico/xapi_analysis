[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Read and clean the input xAPI dataset",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "xapi_analysis",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "xapi_analysis",
    "section": "Install",
    "text": "Install\npip install xapi_analysis"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "xapi_analysis",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "input.html",
    "href": "input.html",
    "title": "Read an input JSON statement",
    "section": "",
    "text": "The libraries used to import the data:\n\nimport json\nimport pandas\nfrom typing import Union, List\nfrom datetime import datetime\nfrom pathlib import Path\nfrom fastcore.test import *\n\nAs an example, in this package we provide two files, a csv containing a collection of about 1000 statements, as well as a json of a stetement and all its related metadata\n\ncsv_file = '../example_statements.csv'\njson_file = '../example_single_statement.json'\n\nLet’s start parsing the json file\n\n\nload_statement\n\n load_statement (json_file:str)\n\nLoad a json from file and store the information in a Python dictionary object. If the file does not exist, returns an empty dict and print an error message\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\njson_file\nstr\nFilename of the json containing the statement\n\n\nReturns\ndict\nA dictionary representing the statement structure\n\n\n\n\nmy_statement = load_statement(json_file)\n\n\n\n\npretty_print_statement\n\n pretty_print_statement (statement:dict, indent:int=4)\n\nDisplays the content of the statement in a human readable format\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstatement\ndict\n\nthe statement dict imported from JSON\n\n\nindent\nint\n4\nindentation used when printing\n\n\nReturns\nNone\n\n\n\n\n\n\nsample_json = json.loads('[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]')\npretty_print_statement(sample_json, indent=2)\n\n[\n  \"foo\",\n  {\n    \"bar\": [\n      \"baz\",\n      null,\n      1.0,\n      2\n    ]\n  }\n]\n\n\n\nExtract the metadata information\nThe following methods are used to extract the metadata fields we may be interested in\n\n\n\n\nget_value\n\n get_value (statement:dict, key:str)\n\nReturn the value associated to the specified key in the statement dictionary. If the key does not exist, returns None\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nkey\nstr\nThe key we are interested in\n\n\nReturns\ntyping.Union[str, dict, NoneType]\nThe value associated to the key in the statement\n\n\n\n\ntest_eq(get_value(my_statement, \"not_a_key\"), None)\ntest_eq(get_value(my_statement, \"stored\"), \"2022-09-30T13:34:35.959Z\")\n\n\n\n\nget_stored\n\n get_stored (statement:dict)\n\nExtract the date and time information of when the statement was stored in the database\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndatetime\ndatetime object representing the time the statement was stored in the database\n\n\n\n\nmy_date = datetime.strptime(\"2022-09-30T13:34:35.959Z\", \"%Y-%m-%dT%H:%M:%S.%f%z\")\ntest_eq(get_stored(my_statement), my_date)\n\n\n\n\nget_active\n\n get_active (statement:dict)\n\nExtract the Active field from the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nbool\nBoolean representive whether active or not\n\n\n\n\ntest_eq(get_active(my_statement), True)\n\n\n\n\nget_client\n\n get_client (statement:dict)\n\nExtract the client field from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nID of the client\n\n\n\n\ntest_eq(get_client(my_statement), \"60ffcf8d448b2d059a63e3c4\")\n\n\n\n\nget_LRS\n\n get_LRS (statement:dict)\n\nExtract the Learning Record Store ID field from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nID of the Learning Record Store\n\n\n\n\ntest_eq(get_LRS(my_statement), \"60ffcf8d448b2d059a63e3c3\")\n\n\ndef get_completed_fw_queues(statement: dict, # Our xAPI statement imported from JSON\n                ) -> List: # List of completed forwarding queues in the statement\n    \"\"\"\n    Extract the List of completed forwarding queues in the statement\n    \"\"\"\n    return get_value(statement, \"completedForwardingQueue\")\n\n\ntest_eq(get_completed_fw_queues(my_statement), list())\n\n\ndef get_failed_fw_log(statement: dict, # Our xAPI statement imported from JSON\n                ) -> List: # List of failed forwarding log messages in the statement\n    \"\"\"\n    Extract the List of failed forwarding log messages in the statement\n    \"\"\"\n    return get_value(statement, \"failedForwardingLog\")\n\n\ntest_eq(get_failed_fw_log(my_statement), list())\n\n\ndef get_completed_queues(statement: dict, # Our xAPI statement imported from JSON\n                ) -> List: # List of completed queues in the statement\n    \"\"\"\n    Extract the List of completed queues in the statement\n    \"\"\"\n    return get_value(statement, \"completedQueues\")\n\n\nCOMPL_QS = [\"STATEMENT_FORWARDING_QUEUE\", \"STATEMENT_PERSON_QUEUE\", \"STATEMENT_QUERYBUILDERCACHE_QUEUE\"]\ntest_eq(get_completed_queues(my_statement), COMPL_QS)"
  },
  {
    "objectID": "input_json.html",
    "href": "input_json.html",
    "title": "Read an input JSON statement",
    "section": "",
    "text": "The libraries used to import the data:\n\nimport json\nfrom typing import Union, List\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\nfrom fastcore.test import *\n\nAs an example, in this package we provide a json file containing a statement and all its related metadata\n\njson_file = '../example_single_statement.json'\n\n\nLoad an xAPI statement\nLet’s start parsing the json file\n\nsource\n\n\nload_statement\n\n load_statement (json_file:str)\n\nLoad a json from file and store the information in a Python dictionary object. If the file does not exist, returns an empty dict and print an error message\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\njson_file\nstr\nFilename of the json containing the statement\n\n\nReturns\ndict\nA dictionary representing the statement structure\n\n\n\n\nmy_statement = load_statement(json_file)\n\n\nsource\n\n\npretty_print_statement\n\n pretty_print_statement (statement:dict, indent:int=4)\n\nDisplays the content of the statement in a human readable format\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstatement\ndict\n\nthe statement dict imported from JSON\n\n\nindent\nint\n4\nindentation used when printing\n\n\nReturns\nNone\n\n\n\n\n\n\nsample_json = json.loads('[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]')\npretty_print_statement(sample_json, indent=2)\n\n[\n  \"foo\",\n  {\n    \"bar\": [\n      \"baz\",\n      null,\n      1.0,\n      2\n    ]\n  }\n]\n\n\n\nsource\n\n\nget_value\n\n get_value (statement:dict, key:str)\n\nReturn the value associated to the specified key in the statement dictionary. If the key does not exist, returns None\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nkey\nstr\nThe key we are interested in\n\n\nReturns\ntyping.Union[str, dict, typing.List, NoneType]\nThe value associated to the key in the statement\n\n\n\n\ntest_eq(get_value(my_statement, \"not_a_key\"), None)\ntest_eq(get_value(my_statement, \"stored\"), \"2022-09-30T13:34:35.959Z\")\n\n\nExtract statement data\nThe following methids are used to extract the actor, verb and object information, which represents the core information provided in each statement, as well as the version statement\n\nsource\n\n\n\nget_actor\n\n get_actor (statement:dict)\n\nExtract the actor information from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndict\ndictionary containing actor information\n\n\n\n\ntest_actor = {\n      \"objectType\": \"Agent\",\n      \"name\": \"1s1116\",\n      \"mbox\": \"mailto:student@app.com\"\n    }\nactor = get_actor(my_statement)\ntest_eq(actor[\"objectType\"], test_actor[\"objectType\"])\ntest_eq(actor[\"name\"], test_actor[\"name\"])\ntest_eq(actor[\"mbox\"], test_actor[\"mbox\"])\n\n\nsource\n\n\nget_actor_name\n\n get_actor_name (statement:dict)\n\nQuick access to the name field of the actor, as it is the most relevant information\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nname of the actor\n\n\n\n\ntest_eq(get_actor_name(my_statement), \"1s1116\")\n\n\nsource\n\n\nget_verb\n\n get_verb (statement:dict)\n\nExtract the verb information from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndict\ndictionary containing verb information\n\n\n\n\ntest_verb = {\n      \"id\": \"http://id.tincanapi.com/verb/selected/\",\n      \"display\": {\n        \"en-US\": \"Selected\"\n      }\n}\nverb = get_verb(my_statement)\ntest_eq(verb[\"id\"], test_verb[\"id\"])\ntest_eq(verb[\"display\"][\"en-US\"], test_verb[\"display\"][\"en-US\"])\n\n\nsource\n\n\nget_verb_str\n\n get_verb_str (statement:dict)\n\nQuick access to the display field of the verb, as it is the most relevant information\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nthe displayed verb\n\n\n\n\ntest_eq(get_verb_str(my_statement), \"Selected\")\n\n\nsource\n\n\nget_object\n\n get_object (statement:dict)\n\nExtract the object information from the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndict\ndictionary containing object information\n\n\n\n\ntest_obj = {\n      \"objectType\": \"Activity\",\n      \"id\": \"http://example.com/activities/student-lesson\",\n      \"definition\": {\n        \"name\": {\n          \"en-US\": \"Lesson\"\n        },\n        \"description\": {\n          \"en-US\": \"Level 1 Module8 started\"\n        }\n      }\n}\nobj = get_object(my_statement)\ntest_eq(obj[\"id\"], test_obj[\"id\"])\ntest_eq(obj[\"objectType\"], test_obj[\"objectType\"])\ntest_eq(obj[\"definition\"][\"name\"][\"en-US\"], test_obj[\"definition\"][\"name\"][\"en-US\"])\ntest_eq(obj[\"definition\"][\"description\"][\"en-US\"], test_obj[\"definition\"][\"description\"][\"en-US\"])\n\n\nsource\n\n\nget_object_definition\n\n get_object_definition (statement:dict)\n\nQuick access to the object definition\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nthe object definition\n\n\n\n\ntest_eq(get_object_definition(my_statement), \"Lesson\")\n\n\nsource\n\n\nget_object_description\n\n get_object_description (statement:dict)\n\nQuick access to the object description\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nthe object description\n\n\n\n\ntest_eq(get_object_description(my_statement), \"Level 1 Module8 started\")\n\n\nExtract the metadata information\nThe following methods are used to extract the metadata fields we may be interested in\n\nGet general metadata information\n\nsource\n\n\n\n\nget_stored\n\n get_stored (statement:dict)\n\nExtract the date and time information of when the statement was stored in the database\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndatetime\ndatetime object representing the time the statement was stored in the database\n\n\n\n\nmy_date = datetime.strptime(\"2022-09-30T13:34:35.959Z\", \"%Y-%m-%dT%H:%M:%S.%f%z\")\ntest_eq(get_stored(my_statement), my_date)\n\n\nsource\n\n\nget_timestamp\n\n get_timestamp (statement:dict)\n\nExtract the date and time information of when the statement was created\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ndatetime\ndatetime object representing the time the statement was generated\n\n\n\n\nmy_ts = datetime.strptime(\"2022-09-30T13:34:35.959Z\", \"%Y-%m-%dT%H:%M:%S.%f%z\")\ntest_eq(get_timestamp(my_statement), my_date)\n\n\nsource\n\n\nget_time_diff\n\n get_time_diff (statement:dict)\n\nCompute the time difference between when a statement was sent and when it was stored in the database\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntimedelta\nTime difference between when the statement was sent and when it was stored\n\n\n\n\ntest_eq(get_time_diff(my_statement), timedelta()) # In our example statement the timestamps are the same\n\n\nGet Boolean metadata information\nThese methods return the metadata providing boolean information related to the statement\n\nsource\n\n\n\nis_active\n\n is_active (statement:dict)\n\nExtract the Active field from the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nbool\nBoolean representive whether active or not\n\n\n\n\ntest_eq(is_active(my_statement), True)\n\n\nsource\n\n\nis_voided\n\n is_voided (statement:dict)\n\nExtract the Active field from the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nbool\nBoolean representive whether statement is voided or not\n\n\n\n\ntest_eq(is_voided(my_statement), False)\n\n\nsource\n\n\nhas_generated_id\n\n has_generated_id (statement:dict)\n\nExtract the Active field from the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nbool\nBoolean representive whether statement has generated id\n\n\n\n\ntest_eq(has_generated_id(my_statement), False)\n\n\nGet ID metadata information\nThese methods return the metadata providing ID information\n\nsource\n\n\n\nget_client\n\n get_client (statement:dict)\n\nExtract the client field from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nID of the client\n\n\n\n\ntest_eq(get_client(my_statement), \"60ffcf8d448b2d059a63e3c4\")\n\n\nsource\n\n\nget_LRS\n\n get_LRS (statement:dict)\n\nExtract the Learning Record Store ID field from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nID of the Learning Record Store\n\n\n\n\ntest_eq(get_LRS(my_statement), \"60ffcf8d448b2d059a63e3c3\")\n\n\nsource\n\n\nget_id\n\n get_id (statement:dict)\n\nExtract the ID field from the statement\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nID of the statement\n\n\n\n\ntest_eq(get_id(my_statement), \"6336f06c6ce79d05ebef40a7\")\n\n\nsource\n\n\nget_persona_id\n\n get_persona_id (statement:dict)\n\nExtract the persona identifier\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nid of the persona associated to the statement\n\n\n\n\ntest_eq(get_persona_id(my_statement), \"6103e17eaed02c30c695bffb\")\n\n\nsource\n\n\nget_organisation\n\n get_organisation (statement:dict)\n\nExtract the persona identifier\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nid of the organization to the statement\n\n\n\n\ntest_eq(get_organisation(my_statement), \"60faab70448b2d059a63e375\")\n\n\nsource\n\n\nget_hash\n\n get_hash (statement:dict)\n\nExtract the hash\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\nstr\nhash of the statement\n\n\n\n\ntest_eq(get_hash(my_statement), \"3268dd76c35a6077796979e0613654ecf449c46e\")\n\n\nGet queues metadata information\nThese methods return the metadata related to the queues information in the statement\n\nsource\n\n\n\nget_completed_fw_queues\n\n get_completed_fw_queues (statement:dict)\n\nExtract the List of completed forwarding queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of completed forwarding queues in the statement\n\n\n\n\ntest_eq(get_completed_fw_queues(my_statement), list())\n\n\nsource\n\n\nget_failed_fw_log\n\n get_failed_fw_log (statement:dict)\n\nExtract the List of failed forwarding log messages in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of failed forwarding log messages in the statement\n\n\n\n\ntest_eq(get_failed_fw_log(my_statement), list())\n\n\nsource\n\n\nget_completed_queues\n\n get_completed_queues (statement:dict)\n\nExtract the List of completed queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of completed queues in the statement\n\n\n\n\nCOMPL_QS = [\"STATEMENT_FORWARDING_QUEUE\", \"STATEMENT_PERSON_QUEUE\", \"STATEMENT_QUERYBUILDERCACHE_QUEUE\"]\ntest_eq(get_completed_queues(my_statement), COMPL_QS)\n\n\nsource\n\n\nget_completed_queues\n\n get_completed_queues (statement:dict)\n\nExtract the List of completed queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of completed queues in the statement\n\n\n\n\ntest_eq(get_completed_fw_queues(my_statement), list())\n\n\nsource\n\n\nget_dead_forwarding_queues\n\n get_dead_forwarding_queues (statement:dict)\n\nExtract the List of dead forwarding queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of dead forwarding queues in the statement\n\n\n\n\ntest_eq(get_dead_forwarding_queues(my_statement), list())\n\n\nsource\n\n\nget_pending_forwarding_queues\n\n get_pending_forwarding_queues (statement:dict)\n\nExtract the List of pending forwarding queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of completed queues in the statement\n\n\n\n\ntest_eq(get_pending_forwarding_queues(my_statement), list())\n\n\nsource\n\n\nget_processing_queues\n\n get_processing_queues (statement:dict)\n\nExtract the List of processing queues in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of processing queues in the statement\n\n\n\n\ntest_eq(get_processing_queues(my_statement), list())\n\n\nsource\n\n\nget_registrations\n\n get_registrations (statement:dict)\n\nExtract the List of registrations in the statement\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nstatement\ndict\nOur xAPI statement imported from JSON\n\n\nReturns\ntyping.List\nList of registrations in the statement\n\n\n\n\ntest_eq(get_registrations(my_statement), list())"
  }
]