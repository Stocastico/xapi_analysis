# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_input_json.ipynb.

# %% auto 0
__all__ = ['load_statement', 'pretty_print_statement', 'get_value', 'get_stored', 'get_active', 'get_client', 'get_LRS']

# %% ../nbs/00_input_json.ipynb 8
def load_statement(json_file: str # Filename of the json containing the statement
                  ) -> dict: # A dictionary representing the statement structure
    """
    Load a json from file and store the information in a Python dictionary object.
    If the file does not exist, returns an empty dict and print an error message
    """
    if Path(json_file).exists():
        with open(json_file) as f:
            return json.load(f)
    else:
        print("ERROR: The specified file does not exist")
        return dict()

# %% ../nbs/00_input_json.ipynb 10
def pretty_print_statement(statement: dict, # the statement dict imported from JSON
                          indent: int=4 # indentation used when printing
                          ) -> None:
    """
    Displays the content of the statement in a human readable format
    """
    print(json.dumps(statement, indent=indent))

# %% ../nbs/00_input_json.ipynb 13
def get_value(statement: dict, # Our xAPI statement imported from JSON
              key: str # The key we are interested in
             ) -> Union[str, dict, None]: # The value associated to the key in the statement
    """
    Return the value associated to the specified key in the statement dictionary.
    If the key does not exist, returns None
    """
    if key in statement:
        return statement[key]
    else:
        return None

# %% ../nbs/00_input_json.ipynb 15
def get_stored(statement: dict, # Our xAPI statement imported from JSON
              ) -> datetime: # datetime object representing the time the statement was stored in the database
    """
    Extract the date and time information of when the statement was stored in the database
    """
    stored_str = get_value(statement, "stored")
    return datetime.strptime(stored_str, "%Y-%m-%dT%H:%M:%S.%f%z")

# %% ../nbs/00_input_json.ipynb 17
def get_active(statement: dict, # Our xAPI statement imported from JSON
              ) -> bool: # Boolean representive whether active or not
    """
    Extract the Active field from the statement
    """
    return get_value(statement, "active")

# %% ../nbs/00_input_json.ipynb 19
def get_client(statement: dict, # Our xAPI statement imported from JSON
              ) -> str: # ID of the client
    """
    Extract the client field from the statement
    """
    return get_value(statement, "client")

# %% ../nbs/00_input_json.ipynb 21
def get_LRS(statement: dict, # Our xAPI statement imported from JSON
              ) -> str: # ID of the Learning Record Store
    """
    Extract the Learning Record Store ID field from the statement
    """
    return get_value(statement, "lrs_id")
